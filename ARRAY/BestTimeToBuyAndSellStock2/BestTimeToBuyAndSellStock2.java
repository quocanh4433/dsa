


public class BestTimeToBuyAndSellStock2 {

    // B√†i 122 ch√≠nh l√† n·ªÅn t·∫£ng ƒë·ªÉ hi·ªÉu c√°c b√†i ph·ª©c t·∫°p h∆°n ‚Äî c√°c b√†i sau ch·ªâ th√™m ƒëi·ªÅu ki·ªán ho·∫∑c m·ªü r·ªông s·ªë state m√† th√¥i


    /**
     * üí° IDEA: 
     * ‚ÄúC·ª© khi n√†o gi√° h√¥m sau cao h∆°n h√¥m nay, ta b√°n‚Äù c√≥ t·ªëi ∆∞u kh√¥ng?
     * 
     * üëâ N·∫øu nh∆∞ v·∫≠y th√¨ l√†m sao ƒë·∫£m b·∫£o profit cu·ªëi c√πng l√† maxprofit?
     * 
     * 
     * üëâ Greedy ch√≠nh l√† Dynamic programming ƒë√∫ng kh√¥ng?
     * 
     * 
     */

    // Ultimate transaction (Mua b√°n kh√¥ng gi·ªõi h·∫°n)
    // GI·∫¢I THEO GREEDY - C·ª© l·ªùi l√† b√°n
    public int maxProfit(int[] prices) {
        int profit = 0;
        for (int i = 1; i < prices.length; i++) {
            if (prices[i] > prices[i - 1]) {
                profit += prices[i] - prices[i - 1];
            }
        }
        return profit;
    }


    // GI·∫¢I THEO DP
    public int maxProfit_DP(int[] prices) {
        int n = prices.length;
        int[] hold = new int[n];
        int[] notHold = new int[n];

        hold[0] = -prices[0];
        notHold[0] = 0;

        for (int i = 1; i < n; i++) {
            hold[i] = Math.max(hold[i - 1], notHold[i - 1] - prices[i]);
            notHold[i] = Math.max(notHold[i - 1], hold[i - 1] + prices[i]);
        }

        return notHold[n - 1];
    }

    public static void main(String[] args) {

    }
}
